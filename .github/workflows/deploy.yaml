name: Deploy Swagger UI to GitHub Pages

on:
  push:
    branches:
      - 'api-doc-*'
  pull_request:
    branches:
      - 'api-doc-*'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # 1) リポジトリのチェックアウト
      - name: Check out
        uses: actions/checkout@v3

      # 2) (必要に応じて) npm install などを実行する
      #    例: swagger-ui-dist をビルドしたい場合など
      # - name: Install dependencies
      #   run: npm install

      # 3) ブランチ名を取得 (api-doc-feature-xxx の部分)
      - name: Get branch name
        id: get_branch
        run: echo "BRANCH_NAME=${GITHUB_REF##*/}" >> $GITHUB_OUTPUT

      # 4) gh-pagesブランチにデプロイ
      - name: Deploy to gh-pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs  # Swagger UIとして公開したい静的ファイルのあるディレクトリ
          publish_branch: gh-pages
          destination_dir: ${{ steps.get_branch.outputs.BRANCH_NAME }}
          # ↑ ブランチ名と同じディレクトリを作成し、その中へ配置

      # 5) Pull Requestが作成(または更新)されたタイミングで、PRにデプロイ先URLをコメント
      - name: Post a comment to the Pull Request
        # pull_requestイベントのときだけコメントを投稿したいので条件指定
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v6
        with:
          script: |
            const branchName = "${{ steps.get_branch.outputs.BRANCH_NAME }}";
            // GitHub PagesのURLを組み立てる
            // ※ <ユーザー名> / <リポジトリ名> をご自身の値に置き換えてください
            const url = `https://kazuhirotakahashiaq.github.io/swagger-page/${branchName}/index.html`;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Swagger UI is deployed here:\n${url}`
            });
